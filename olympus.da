# define the master process
class Node(process):

############################################
# Necessary functions setup and run
############################################
  # define the setup for the master
  def setup(fault_tolerance_factor, replica_set):
    self.fault_tolerance_factor = fault_tolerance_factor
    self.replica_sequence       = []
    self.replica_set            = replica_set

  # main execution flow for the master
  def run():
    startReplicas()
    while(True):
      --replica_to_olympus
      --client_to_olympus

############################################
#  Helper Functions
############################################
  # start the replicas
  def startReplicas():
    replicas_required = 2*fault_tolerance_factor + 1

    for replica_id in set(replica_set):
      replica_sequence.append(replica_id)

    counter = 0
    for replica_id in replica_sequence:
      # default conditions, used when only one node present
      replica_type = "HEAD"
      pre = None
      post = None
      if( len(replica_sequence) > 1 ):
        if (counter==0):
          post = replica_sequence[counter+1]
        if (counter==replicas_required-1):
          replica_type = "TAIL"
          pre = replica_sequence[counter-1]
        if (counter>0 and counter<replicas_required-1):
          replica_type = "INNER"
          pre = replica_sequence[counter-1]
          post = replica_sequence[counter+1]
      setup(replica_id, (replica_type, pre, post, fault_tolerance_factor) )
      start(replica_id)
      counter += 1

    output(str(replicas_required) + " replica(s) started by Olympus.")

############################################
#  Received messages handler
############################################
  def receive(msg=('GetConfig',), from_=client):
    output("Received GetConfig request from a client.")
    send(('GetConfig_Response', replica_sequence[0]), to=client)
    output("Sent GetConfig_Response to client.")
