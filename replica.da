import re
import time
import nacl.encoding
import nacl.signing

# define the replica process
class Node(process):


############################################
#  Necessary functions setup and run
############################################

  # define the setup for the client
  def setup(replica_type, pre, post, fault_tolerance_factor, replica_sign_key, sign_verify_keys, replica_timeout_value):
    self.myReplicaType = replica_type
    self.pre = pre
    self.post = post
    self.my_sign_key = replica_sign_key
    self.sign_verify_keys = sign_verify_keys
    self.replica_timeout_value = replica_timeout_value
    self.objDict = {}
    self.result_cache = {}
    self.response_cache = {}
    self.slot = 0
    self.timeout = {}


  # main execution flow of the client
  def run():

    while(True):

      # messages from olympus get higher priority
      --olympus_to_replica
      --client_to_replica
      --replica_to_replica

      # check the timeout array for any timeout
      for key, value in timeout.items():
        now = time.time()
        difference = int(now - value)
        if(difference > replica_timeout_value):
          #send reconfig to Olympus
          pass



############################################
#  Helper Functions
############################################
  def getByteForm(string, encoding_format='utf-8'):
    return bytes(string, encoding=encoding_format)

  def doWork(work):
    # matchObj = re.match( r'\s*(put|get|slice|append)\(\'(.*)\'(,|.)\s*(\'|.)(.*)\'\)\s*', work)
    matchObj = re.match( r'\s*(put|get|append|slice)\((.*)\)\s*', work)
    print( "operation= " + matchObj.group(1) + " , operand(s)= " + matchObj.group(2) )

    # if no valid operation or first operator is found
    if( (not matchObj.group()) or (not matchObj.group(1)) or (not matchObj.group(2)) ):
      return 'fail'

    operand_str = matchObj.group(2).strip()

    if(matchObj.group(1) == 'put'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      objDict[matchObj.group(1)] = matchObj.group(2)
      return 'OK'

    if(matchObj.group(1) == 'get'):
      matchObj = re.match( r'\'(.*)\'.*', operand_str)
      if( not objDict[ matchObj.group(1) ] ):
        return ''
      else:
        return objDict[matchObj.group(1)]

    if(matchObj.group(1) == 'append'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not objDict[ matchObj.group(1) ] ):
        return 'fail'
      else:
        objDict[ matchObj.group(1) ] += matchObj.group(2)
        return 'OK'

    if(matchObj.group(1) == 'slice'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not objDict[ matchObj.group(1) ] ):
        return 'fail'
      else:
        # TODO, add valid slice length check here
        indicesObj = re.match( r'(.*):(.*)', matchObj.group(2))
        index1 = int( indicesObj.group(1) )
        index2 = int( indicesObj.group(2) )
        objDict[ matchObj.group(1) ] = objDict[ matchObj.group(1) ][ index1:index2 ]
        return 'OK'

    return ''

  def getSigned(string):
    return my_sign_key.sign( getByteForm(string) )

  def cryptoEncode(string):
    return nacl.encoding.HexEncoder.encode( getByteForm(string) )

  def create_shuttle_object(workload, result):
    slot += 1
    shuttle_object = {
      'client_workload': workload,
      'order_statement': [ getSigned(result) ],
      'result_statements': [ cryptoEncode(result) ], # need to create a cryptohash for this
      'slot': slot         # head should increment this
    }
    return shuttle_object

  def morph_shuttle_object_forward(shuttle_object, result):
    addToResultCache( shuttle_object['client_workload']['id'], result )
    shuttle_object['order_statement'].append( getSigned(result) )
    shuttle_object['result_statements'].append( cryptoEncode(result) )
    return shuttle_object

  def create_cli_res_obj(shuttle_object, result):
    client_response_object = {
      'client_workload': shuttle_object['client_workload'],
      'result': result,
      'result_statements': shuttle_object['result_statements']
    }
    return client_response_object

  def create_reverse_shuttle_object( shuttle_object ):
    return shuttle_object

  def cacheWorkload( reverse_shuttle_object ):
    client_workload_id = reverse_shuttle_object['client_workload']['id']
    result = result_cache[ client_workload_id ]
    del result_cache[ client_workload_id ]
    client_response_object = create_cli_res_obj(reverse_shuttle_object, result)
    response_cache[ client_workload_id ] = client_response_object

  def addToResultCache(request_id, result):
    result_cache[request_id] = result

  def validateShuttleObject( shuttle_object ):
    # true initially
    default_status = True
    # print( shuttle_object )

    # prove otherwise
    # 1. look for slot holes
    if( shuttle_object['slot'] != slot+1 ):
      default_status = False

    # 2. validate signatures and holes
    counter = 0
    statements = shuttle_object['order_statement']
    for statement in statements:
      verify_key_hex = sign_verify_keys[counter]
      verify_key = nacl.signing.VerifyKey(verify_key_hex, encoder=nacl.encoding.HexEncoder)
      try:
        verify_key.verify(statement)
      except nacl.exceptions.BadSignatureError:
        default_status = False
      counter += 1

    # 3. validate crypto hashes, whether all are same or not
    result_statements = shuttle_object['result_statements']
    default_status = all(x == result_statements[0] for x in result_statements)

    # make neccessary changes, if valid shuttle
    if(default_status):
      slot += 1

    return default_status

  def inResultCache( workload ):
    return workload['id'] in result_cache

  def inCache( workload ):
    return workload['id'] in response_cache

  def addToTimeOut( workload ):
    timeout[ workload['id'] ] = time.time()

  def presentInTimeOut( reverse_shuttle_object ):
    return reverse_shuttle_object['client_workload']['id'] in timeout

  def deleteEntryInTimeOut( workload_id ):
    del timeout[ workload_id ]

############################################
#  Received messages handler
############################################

  # handle operation requests from client
  def receive( msg=('Operation', workload), from_=client ):
    output("Received operation request from client.")
    # first check with workload id if this request is in cache
    if inCache(workload) or inResultCache(workload):
      # received result shuttle for this object
      # can reply to client directly
      if( inCache(workload) ):
        client_response_object = inCache( workload )
        send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
        output("Sent retransmitted Operation_Response to client.")
        return
      # still waiting to receive the result shuttle
      if( inResultCache(workload) ):
        # add request to timeout DS
        addToTimeOut( workload )
        return
    else:
      result = doWork(workload['operation'])
      if ( (myReplicaType=="HEAD") and (post is None) ):
        send(('Operation_Response', result), to=client)
        addToResultCache( workload['id'], result )
        shuttle_object = create_shuttle_object(workload, result)
        cacheWorkload( shuttle_object )
        output("Sent Operation_Response to client.")
      else:
        shuttle_object = create_shuttle_object(workload, result)
        addToResultCache( workload['id'], result )
        send(('Shuttle', shuttle_object), to=post)
        output("Sent Shuttle to next node.")


  # handle shuttle messages from other replicas
  def receive( msg=('Shuttle', shuttle_object), from_=replica_set ):
    output("Received Shuttle slot="+ str(shuttle_object['slot']) +", from previous replica.")

    # validate shuttle first
    if( not validateShuttleObject(shuttle_object) ):
      #send reconfig request to Olympus
      return

    # perform the operation and get the result
    result = doWork(shuttle_object['client_workload']['operation'])
    # check if result matches with the crypto hash

    # take further action based on replica type
    if( myReplicaType=='TAIL' ):
      # send response to client
      shuttle_object = morph_shuttle_object_forward(shuttle_object, result)
      client_response_object = create_cli_res_obj(shuttle_object, result)
      send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
      output("Sent Operation_Response to client.")

      # start reverse shuttle
      reverse_shuttle_object = create_reverse_shuttle_object( shuttle_object )
      send(('Reverse_Shuttle', reverse_shuttle_object), to=pre)
      output("Sent Reverse_Shuttle to previous node.")
    else:
      # inner node will forward shuttle to succeding replica
      forward_shuttle_object = morph_shuttle_object_forward(shuttle_object, result)
      send(('Shuttle', forward_shuttle_object), to=post)
      output("Sent Shuttle to next node.")


  # handle reverse shuttle messages from other replicas
  def receive( msg=('Reverse_Shuttle', reverse_shuttle_object), from_=replica_set ):
    output("Received Reverse_Shuttle slot="+ str(reverse_shuttle_object['slot']) +", from next replica.")
    # write what to do for this operation
    cacheWorkload( reverse_shuttle_object )
    # also check if this operation is in timeout handler array
    if( presentInTimeOut(reverse_shuttle_object) ):
      client_response_object = inCache( reverse_shuttle_object['client_workload'] )
      send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
      output("Sent retransmitted Operation_Response to client.")
      deleteEntryInTimeOut( reverse_shuttle_object['client_workload']['id'] )

    if( myReplicaType!='HEAD' and pre ):
      send(('Reverse_Shuttle', reverse_shuttle_object), to=pre)
      output("Sent Reverse_Shuttle to previous node.")

