import re
import time
import pickle
import nacl.encoding
import nacl.signing
import pprint
pp = pprint.PrettyPrinter(indent=4)

# define the replica process
class Node(process):


############################################
#  Necessary functions setup and run
############################################

  # define the setup for the client
  def setup(olympus, replica_type, pre, post, fault_tolerance_factor, replica_sign_key, sign_verify_keys, replica_timeout_value, client_public_keys, config_ID, myPosition, replica_sequence, client_seq_no, failure):
    self.olympus = olympus
    self.myReplicaType = replica_type
    self.pre = pre
    self.post = post
    self.my_private_key = replica_sign_key
    self.sign_verify_keys = sign_verify_keys
    self.replica_timeout_value = replica_timeout_value
    self.client_public_keys = client_public_keys
    self.config_ID = config_ID
    self.myPosition = myPosition
    self.replica_sequence = replica_sequence
    self.client_seq_no = client_seq_no
    self.failure_map = parseFailures(failure)

    self.changeOpFlag = False
    self.changeResultFlag = False
    self.dropResStmtFlag = False
    self.objDict = {}
    self.result_cache = {}
    self.response_cache = {}
    self.slot = 0
    self.timeout = {}
    self.count_log = {
      'client_request': {},
      'forwarded_request': {},
      'shuttle': {},
      'result_shuttle': {}
    }

  # main execution flow of the client
  def run():

    while(True):

      # messages from olympus get higher priority
      --olympus_to_replica
      --client_to_replica
      --replica_to_replica

      # check the timeout array for any timeout
      for key, value in timeout.items():
        now = time.time()
        difference = int(now - value)
        if(difference > replica_timeout_value):
          send(('Reconfig_Request'), to=olympus)
          pass


############################################
#  Helper Functions
############################################
  def getByteForm(string, encoding_format='utf-8'):
    return bytes(string, encoding=encoding_format)

  def handleWorkload(encrypted_workload):
    # decrypt workload
    workload = clientUnsignWorkload(encrypted_workload)
    if(not workload):
      replicaMsg("Dropping request.!", "Signature not verified for client workload.!")
      return
    replicaMsg("Client request signature verified and correct.")

    # check if workload is a retransmission
    if( workload['retransmit'] ):
      replicaMsg("Client request is a retransmit request.")
      # first check with workload id if this request is in cache
      if inCache(workload) or inResultCache(workload):
        # can reply to client directly
        if( inCache(workload) ):
          client_response_object = inCache( workload )
          send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
          output("Sent retransmitted Operation_Response to client.")
          return
        # still waiting to receive the result shuttle
        if( inResultCache(workload) ):
          # add request to timeout DS
          addToTimeOut( workload )
          return
    else:
      replicaMsg("Client request is a new request.")
      if(myReplicaType=="HEAD"):
        result = doWork(workload['operation'])
        shuttle_object = create_shuttle_object(workload)
        addMyStatements(shuttle_object, result)
        addToResultCache( workload['id'], result )
        if( post is None ):
          replicaMsg("Head is the only node.!")
          replicaMsg("Adding to cache.")
          cacheWorkload( shuttle_object )
          client_response_object = create_cli_res_obj(shuttle_object, result)
          send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
          replicaMsg("Sent Operation_Response to client.")
        else:
          send(('Shuttle', shuttle_object), to=post)
          replicaMsg("Sent Shuttle to next node.")
      else:
        replicaMsg("Client request received on a non-head replica.", "Forwarding request to head.")
        send(('Forwarded_Operation', encrypted_workload), to=replica_sequence[0])

  def doWork(work):
    replicaMsg("Replica performing operation= "+ work)
    matchObj = re.match( r'\s*(put|get|append|slice)\((.*)\)\s*', work)

    # if no valid operation or first operator is found
    if( (not matchObj.group()) or (not matchObj.group(1)) or (not matchObj.group(2)) ):
      return 'fail'

    operand_str = matchObj.group(2).strip()

    if(matchObj.group(1) == 'put'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      objDict[matchObj.group(1)] = matchObj.group(2)
      return 'OK'

    if(matchObj.group(1) == 'get'):
      matchObj = re.match( r'\'(.*)\'.*', operand_str)
      if( not objDict[ matchObj.group(1) ] ):
        return ''
      else:
        return objDict[matchObj.group(1)]

    if(matchObj.group(1) == 'append'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not objDict[ matchObj.group(1) ] ):
        return 'fail'
      else:
        objDict[ matchObj.group(1) ] += matchObj.group(2)
        return 'OK'

    if(matchObj.group(1) == 'slice'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not objDict[ matchObj.group(1) ] ):
        return 'fail'
      else:
        # TODO, add valid slice length check here
        indicesObj = re.match( r'(.*):(.*)', matchObj.group(2))
        index1 = int( indicesObj.group(1) )
        index2 = int( indicesObj.group(2) )
        objDict[ matchObj.group(1) ] = objDict[ matchObj.group(1) ][ index1:index2 ]
        return 'OK'

    return ''

  def getSigned(string):
    return my_private_key.sign( string )

  def cryptoEncode(string):
    return nacl.encoding.HexEncoder.encode( getByteForm(string) )

  def create_shuttle_object(workload):
    slot += 1           # head should increment this
    replicaMsg("New shuttle object created with slot="+str(slot))
    shuttle_object = {
      'slot': slot,
      'client_workload': workload,
      'order_proof': {
        'slot': slot,
        'operation': workload['operation'],
        'configID': config_ID,
        'order_statements': []
      },
      'result_proof': {
        'operation': workload['operation'],
        'result_hashes': []
      }
    }
    return shuttle_object

  def addMyStatements(shuttle_object, result):
    operation = shuttle_object['client_workload']['operation']

    # inject failure of change operation
    if(changeOpFlag):
      operation = "get(x)"
      changeOpFlag = False

    # inject failure of change result
    if(changeResultFlag and myReplicaType=='TAIL'):
      result = "OK"
      changeResultFlag = False

    my_order_statement = {
      'slot': slot,
      'operation': operation
    }
    my_result_hash = {
      'operation': operation,
      'result_hash': cryptoEncode(result)
    }
    shuttle_object['order_proof']['order_statements'].append( getSigned( pickle.dumps(my_order_statement) ) )
    shuttle_object['result_proof']['result_hashes'].append( getSigned( pickle.dumps(my_result_hash) ) )

    # inject failure of drop result statement of head
    if(dropResStmtFlag and myReplicaType=='TAIL'):
      shuttle_object['result_proof']['result_hashes'] = shuttle_object['result_proof']['result_hashes'][1:]
      dropResStmtFlag = False
    replicaMsg("Added my order and result statements.")

  def validateShuttleObject( shuttle_object, shuttle_type='forward'):

    if(shuttle_type == 'forward'):
      # 1. look for slot holes
      if( shuttle_object['slot'] != slot+1 ):
        print("Found hole in slot.")
        return False

    # 2. validate size of both proofs same or not
    order_statements = shuttle_object['order_proof']['order_statements']
    result_hashes = shuttle_object['result_proof']['result_hashes']
    if( len(order_statements) != len(result_hashes) ):
      print("Size of order_proof and result_proof arrays do not match.")
      return False

    # 3. validate signature and then contents
    common_result_hash = b''
    common_slot = 0
    common_operation = ''
    for counter in range(0, len(order_statements)):
      # validate signature first
      public_key = sign_verify_keys[counter]
      try:
        decrypted_order_stat = public_key.verify( order_statements[counter] )
        decrypted_res_hsh = public_key.verify( result_hashes[counter] )
      except nacl.exceptions.BadSignatureError:
        print("Signature of replica '"+str(counter)+"'' did not match.")
        return False

      # validate the order statement
      unpickled_order_stat = pickle.loads(decrypted_order_stat)
      if(counter == 0):
        common_slot = unpickled_order_stat['slot']
        common_operation = unpickled_order_stat['operation']
      else:
        if(unpickled_order_stat['slot'] != common_slot):
          print("Slot in order statement of replica '"+str(counter)+"'' did not match.")
          return False
        if(unpickled_order_stat['operation'] != common_operation):
          print("Operation in order statement of replica '"+str(counter)+"'' did not match.")
          return False

      # validate the result statement
      unpickled_result_hash = pickle.loads(decrypted_res_hsh)['result_hash']
      if(counter == 0):
        common_result_hash = unpickled_result_hash
      else:
        if(unpickled_result_hash != common_result_hash):
          print("Result hash in result statement of replica '"+str(counter)+"'' did not match.")
          return False

    # if control reaches here, means valid shuttle
    # do necessary operations
    if(shuttle_type == 'forward'):
      slot += 1

    return True

  def clientUnsignWorkload(workload):
    if workload['requester'] in client_public_keys:
      public_key = client_public_keys[ workload['requester'] ]
      try:
        decrpyted_workload = public_key.verify(workload['encrypted_workload'])
      except nacl.exceptions.BadSignatureError:
        print("Signature of client did not match.")
        return False
      unpickled_workload = pickle.loads(decrpyted_workload)
      unpickled_workload['requester'] = workload['requester']
      # print(unpickled_workload)
    else:
      print("No public key found for client's request")
      return False
    return unpickled_workload

  def create_cli_res_obj(shuttle_object, result):
    client_response_object = {
      'client_workload': shuttle_object['client_workload'],
      'result': result,
      'result_proof': shuttle_object['result_proof']['result_hashes']
    }
    return client_response_object

  def create_reverse_shuttle_object( shuttle_object ):
    return shuttle_object

  def addToResultCache(request_id, result):
    result_cache[request_id] = result

  def cacheWorkload( reverse_shuttle_object ):
    replicaMsg("Added client_response_object to cache.")
    client_workload_id = reverse_shuttle_object['client_workload']['id']
    result = result_cache[ client_workload_id ]
    del result_cache[ client_workload_id ]
    client_response_object = create_cli_res_obj(reverse_shuttle_object, result)
    response_cache[ client_workload_id ] = client_response_object

  def inResultCache( workload ):
    return workload['id'] in result_cache

  def inCache( workload ):
    return workload['id'] in response_cache

  def addToTimeOut( workload ):
    timeout[ workload['id'] ] = time.time()

  def presentInTimeOut( reverse_shuttle_object ):
    return reverse_shuttle_object['client_workload']['id'] in timeout

  def deleteEntryInTimeOut( workload_id ):
    del timeout[ workload_id ]

  def parseFailures( failures ):
    failure_map = {
      'client_request': {},
      'forwarded_request': {},
      'shuttle': {},
      'result_shuttle': {}
    }

    if(not failures):
      return failure_map

    split_arr = failures.split(';')
    for failure in split_arr:
      matchObj = re.match( r'\s*(client_request|forwarded_request|shuttle|result_shuttle)\(([^,]*),([^\)]*)\),([^\()]*)\(\)\s*', failure)
      log_type = matchObj.group(1)
      client_ID = int( matchObj.group(2) )
      message_count = int( matchObj.group(3) )
      trigger_type = matchObj.group(4)
      if( client_ID in failure_map[log_type].keys() ):
        failure_map[log_type][client_ID][message_count] = trigger_type
      else:
        failure_map[log_type][client_ID] = {message_count: trigger_type}

    return failure_map

  def incrementCountLog(log_type, client_name):
    client_ID = client_seq_no[client_name]
    # replicaMsg("Increasing log count for "+ log_type + ", client=" + str(client_ID))
    if( client_ID in count_log[log_type].keys() ):
      count_log[log_type][client_ID] += 1
    else:
      count_log[log_type][client_ID] = 1
    # check if now any failure flag needs to be set
    setFailureFlag(log_type, client_ID, count_log[log_type][client_ID])

  def setFailureFlag(log_type, client_ID, message_count):
    try:
      trigger_type = failure_map[log_type][client_ID][message_count]
      replicaMsg("[Fault Injection] Condition matched for '"+log_type+"', client="+str(client_ID)+", message="+str(message_count)+".!")
    except KeyError:
      return
    if(trigger_type == 'change_operation'):
      changeOpFlag = True
    if(trigger_type == 'change_result'):
      changeResultFlag = True
    if(trigger_type == 'drop_result_stmt'):
      dropResStmtFlag = True

  def replicaMsg(heading, text={}, msg_type='action'):
    if(msg_type=='imp'):
      output("\n==============================================================")
    # output("["+str(self)+"]["+ str(myPosition) + "] - " + heading)
    output("["+ str(myPosition) + "] - " + heading)
    if(text):
      pp.pprint(text)
      # print(text)

  def makeChangesToReverseShuttle(reverse_shuttle_object):
    #currently only used for fault injection

    if(changeResultFlag):
      replicaMsg("[Error Injection] Change Result Flag is true.!")
      my_result_hash = reverse_shuttle_object['result_proof']['result_hashes'][myPosition]
      decrypted_result_hash = sign_verify_keys[myPosition].verify( my_result_hash )
      unpickled_result_hash = pickle.loads(decrypted_result_hash)
      unpickled_result_hash['result_hash'] = cryptoEncode("OK")
      reverse_shuttle_object['result_proof']['result_hashes'][myPosition] = getSigned( pickle.dumps(unpickled_result_hash) )
      changeResultFlag = False

    # inject failure of drop result statement of head
    if(dropResStmtFlag):
      replicaMsg("[Error Injection] Drop Result Statement Flag is true.!")
      reverse_shuttle_object['result_proof']['result_hashes'] = reverse_shuttle_object['result_proof']['result_hashes'][1:]
      dropResStmtFlag = False

    return reverse_shuttle_object

############################################
#  Received messages handler
############################################
  # handle operation requests from client
  def receive( msg=('Operation', encrypted_workload), from_=client ):
    replicaMsg("Received operation request from client. Workload = ", encrypted_workload, msg_type='imp')
    incrementCountLog('client_request', client)   # log message received from this client
    handleWorkload( encrypted_workload )          # do the workload

  # handle operation requests from client
  def receive( msg=('Forwarded_Operation', encrypted_workload), from_=replica_set ):
    replicaMsg("Received Forwarded_Operation request from a replica. Workload = ", encrypted_workload, msg_type='imp')
    incrementCountLog('forwarded_request', encrypted_workload['requester'])   # log message received from this client
    handleWorkload( encrypted_workload )                                      # do the workload

  # handle shuttle messages from other replicas
  def receive( msg=('Shuttle', shuttle_object), from_=replica_set ):
    # replicaMsg("Received Shuttle slot="+str(shuttle_object['slot'])+". Shuttle_Object=", shuttle_object, msg_type='imp')
    replicaMsg("Received Shuttle slot="+str(shuttle_object['slot'])+".", msg_type='imp')
    incrementCountLog('shuttle', shuttle_object['client_workload']['requester'] )   # log the shuttle message received for this client

    # validate shuttle first
    if( not validateShuttleObject(shuttle_object) ):
      replicaMsg("Validation failed for shuttle_object.!")
      send(('Reconfig_Request'), to=olympus)
      return
    replicaMsg("Validation success for shuttle_object.")

    # perform the operation and get the result
    result = doWork(shuttle_object['client_workload']['operation'])
    # check if result matches with the crypto hash
    addMyStatements(shuttle_object, result)
    addToResultCache( shuttle_object['client_workload']['id'], result )

    # take further action based on replica type
    if( myReplicaType=='TAIL' ):
      replicaMsg("I am TAIL.")
      # send response to client
      client_response_object = create_cli_res_obj(shuttle_object, result)
      send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
      replicaMsg("Sent Operation_Response to client.")

      # start reverse shuttle
      reverse_shuttle_object = create_reverse_shuttle_object( shuttle_object )
      cacheWorkload( reverse_shuttle_object )
      send(('Reverse_Shuttle', reverse_shuttle_object), to=pre)
      replicaMsg("Sent Reverse_Shuttle to previous replica.")
    else:
      # inner node will forward shuttle to succeding replica
      send(('Shuttle', shuttle_object), to=post)
      replicaMsg("Forward Shuttle to the next replica.")

  # handle reverse shuttle messages from other replicas
  def receive( msg=('Reverse_Shuttle', reverse_shuttle_object), from_=replica_set ):
    replicaMsg("Received Reverse_Shuttle slot="+str(reverse_shuttle_object['slot'])+".", msg_type='imp')
    incrementCountLog('result_shuttle', reverse_shuttle_object['client_workload']['requester'] )    # log the shuttle message received for this client

    # validate shuttle first
    if( not validateShuttleObject(reverse_shuttle_object, shuttle_type='reverse') ):
      replicaMsg("Validation failed for shuttle_object.!")
      send(('Reconfig_Request'), to=olympus)
      return
    replicaMsg("Validation success for shuttle_object.")

    cacheWorkload( reverse_shuttle_object )       # cache the workload for retransmit in future

    # also check if this operation is in timeout handler array
    if( presentInTimeOut(reverse_shuttle_object) ):
      client_response_object = inCache( reverse_shuttle_object['client_workload'] )
      send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
      output("Sent retransmitted Operation_Response to client.")
      deleteEntryInTimeOut( reverse_shuttle_object['client_workload']['id'] )

    # forward to previous replica, if not head
    if( myReplicaType!='HEAD' and pre ):
      reverse_shuttle_object = makeChangesToReverseShuttle( reverse_shuttle_object )
      send(('Reverse_Shuttle', reverse_shuttle_object), to=pre)
      replicaMsg("Sent Reverse_Shuttle to previous node.")

