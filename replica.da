import re

# define the replica process
class Node(process):

############################################
#  Necessary functions setup and run
############################################
  # define the setup for the client
  def setup(replica_type, pre, post, fault_tolerance_factor):
    self.myReplicaType = replica_type
    self.pre = pre
    self.post = post
    self.objDict = {}

  # main execution flow of the client
  def run():
    while(True):
      # print("i am here")
      # messages from olympus get higher priority
      --olympus_to_replica
      --client_to_replica
      --replica_to_replica

############################################
#  Helper Functions
############################################
  def doWork(work):
    # matchObj = re.match( r'\s*(put|get|slice|append)\(\'(.*)\'(,|.)\s*(\'|.)(.*)\'\)\s*', work)
    matchObj = re.match( r'\s*(put|get|append|slice)\((.*)\)\s*', work)
    print( "operation= " + matchObj.group(1) + " , operand(s)= " + matchObj.group(2) )

    # if no valid operation or first operator is found
    if( (not matchObj.group()) or (not matchObj.group(1)) or (not matchObj.group(2)) ):
      return 'fail'

    operand_str = matchObj.group(2).strip()

    if(matchObj.group(1) == 'put'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      objDict[matchObj.group(1)] = matchObj.group(2)
      return 'OK'

    if(matchObj.group(1) == 'get'):
      matchObj = re.match( r'\'(.*)\'.*', operand_str)
      if( not objDict[ matchObj.group(1) ] ):
        return ''
      else:
        return objDict[matchObj.group(1)]

    if(matchObj.group(1) == 'append'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not objDict[ matchObj.group(1) ] ):
        return 'fail'
      else:
        objDict[ matchObj.group(1) ] += matchObj.group(2)
        return 'OK'

    if(matchObj.group(1) == 'slice'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not objDict[ matchObj.group(1) ] ):
        return 'fail'
      else:
        # TODO, add valid slice length check here
        indicesObj = re.match( r'(.*):(.*)', matchObj.group(2))
        index1 = int( indicesObj.group(1) )
        index2 = int( indicesObj.group(2) )
        objDict[ matchObj.group(1) ] = objDict[ matchObj.group(1) ][ index1:index2 ]
        return 'OK'

    return ''

  def create_shuttle_object(workload, result):
    shuttle_object = {
      'client_workload': workload,
      'result_statements': [result], # need to create a cryptohash for this
      'slot': 1         # head should increment this
    }
    return shuttle_object

  def create_cli_res_obj(shuttle_object, result):
    client_response_object = {
      'client_workload': shuttle_object['client_workload'],
      'result': result,
      'result_statements': shuttle_object['result_statements']
    }
    return client_response_object

############################################
#  Received messages handler
############################################
  def receive(msg=('Wedge',), from_=olympus, at=(olympus_to_replica,) ):
    output("Received wedge request from olympus.")
    # write what to do for wedge on replica
    send(('Wedge_Response',), to=olympus)

  def receive(msg=('Operation', workload), from_=client):
    output("Received operation request from client.")
    # first check with workload id if this request is in cache
    if False:
      pass
    else:
      result = doWork(workload['operation'])
      print(result)
      if ( (myReplicaType=="HEAD") and (post is None) ):
        send(('Operation_Response', result), to=client)
        output("Sent Operation_Response to client.")
      else:
        shuttle_object = create_shuttle_object(workload, result)
        send(('Shuttle', shuttle_object), to=post)
        output("Sent Shuttle to next node.")

  def receive( msg=('Shuttle', shuttle_object), from_=replica_set):
    output("Received shuttle request from previous replica.")
    # write what to do for this operation
    result = doWork(shuttle_object['client_workload']['operation'])
    print(result)
    if( myReplicaType=='TAIL' ):
      client_response_object = create_cli_res_obj(shuttle_object, result)
      send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
      output("Sent Operation_Response to client.")
      reverse_shuttle_object = 'hello'
      send(('Reverse_Shuttle', reverse_shuttle_object), to=pre)
      output("Sent Reverse_Shuttle to previous node.")
    else:
      shuttle_object['result_statements'].append(result)
      send(('Shuttle', shuttle_object), to=post)
      output("Sent Shuttle to next node.")

  def receive( msg=('Reverse_Shuttle', reverse_shuttle_object), from_=replica_set):
    output("Received Reverse_Shuttle from next replica in sequence.")
    # write what to do for this operation
    if( myReplicaType!='HEAD' and pre ):
      send(('Reverse_Shuttle', reverse_shuttle_object), to=pre)
      output("Sent Reverse_Shuttle to previous node.")
