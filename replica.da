import os
import re
import time
import json
import pickle
import logging
import nacl.encoding
import nacl.signing

# define the replica process
class Node(process):


############################################
#  Necessary functions setup and run
############################################

  # define the setup for the client
  def setup(olympus, replica_type, pre, post, fault_tolerance_factor, replica_sign_key, sign_verify_keys, replica_timeout_value, client_public_keys, config_ID, myPosition, replica_sequence, client_seq_no, failure, config, checkpt_interval, replica_start_state):
    self.olympus = olympus
    self.myReplicaType = replica_type
    self.pre = pre
    self.post = post
    self.my_private_key = replica_sign_key
    self.sign_verify_keys = sign_verify_keys
    self.replica_timeout_value = replica_timeout_value
    self.client_public_keys = client_public_keys
    self.config_ID = config_ID
    self.myPosition = myPosition
    self.replica_sequence = replica_sequence
    self.client_seq_no = client_seq_no
    self.failure_map = parseFailures(failure)
    self.config = config
    self.history = []
    self.checkpt_interval = checkpt_interval
    self.objDict = replica_start_state

    self.lastest_checkpt = 0
    self.state = 'OK'
    self.changeOpFlag = False
    self.changeResultFlag = False
    self.dropResStmtFlag = False
    self.crashFlag = False
    self.silent = False
    self.ignoreThisMsg = False
    self.invalidOrderSigFlag = False
    self.invalidResultSigFlag = False
    self.dropCheckptStmtFlag = False
    self.truncateHistFlag = False
    self.truncateHistVal = 0
    self.tempObjDict = {}
    self.result_cache = {}
    self.response_cache = {}
    self.slot = 0
    self.reverse_slot = 0
    self.checkpt_no = 0
    self.timeout = {}
    self.latest_checkpt_proof = []
    self.last_client_result = {}
    self.count_log = {
      'client_request': {},
      'forwarded_request': {},
      'shuttle': {},
      'result_shuttle': {},
      'wedge_request': -1,
      'checkpoint': -1,
      'completed_checkpoint': -1,
      'get_running_state': -1,
      'catch_up': -1
    }
    replicaMsg("i am alive.! :D")
    replicaMsg("objDict at start=", objDict)
    replicaMsg("failure triggers=",failure_map)

  # main execution flow of the client
  def run():
    while(True):
      if crashFlag:
        if not silent:
          replicaMsg("[Error Injection] Crash Flag is true. Dying now.!")
        break

      # messages from olympus get higher priority
      --olympus_to_replica
      --client_to_replica
      --replica_to_replica

      # check the timeout array for any timeout
      if( workableState() ):
        for key, value in timeout.items():
          now = time.time()
          difference = now - value['time']
          difference *= 1000
          if(difference > replica_timeout_value):
            if not value['reconfig_raised']:
              replicaMsg("TimeOut expired for a request.")
              sendReconfigToOlympus()
              value['reconfig_raised'] = True
    logging.shutdown()


############################################
#  Helper Functions
############################################
  def getByteForm(string, encoding_format='utf-8'):
    return bytes(string, encoding=encoding_format)

  def handleWorkload(encrypted_workload):
    # decrypt workload
    workload = clientUnsignWorkload(encrypted_workload)
    if(not workload):
      replicaMsg("Dropping request.!", "Signature not verified for client workload.!")
      return
    replicaMsg("Client request signature verified and correct.")

    # check if workload is a retransmission
    # if( workload['retransmit'] ):
    if( True ):
      # replicaMsg("Client request is a retransmit request.")
      # first check with workload id if this request is in cache
      if inCache(workload) or inResultCache(workload):
        # can reply to client directly
        if( inCache(workload) ):
          client_response_object = getCache( workload )
          output(client_response_object)
          send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
          replicaMsg("Sent retransmitted Operation_Response to client.", client_response_object)
          return
        # still waiting to receive the result shuttle
        if( inResultCache(workload) ):
          # add request to timeout DS
          addToTimeOut( workload , sendClientResponse=True)
          return
    # else:
    # if control has reached till here it is a new request
    if(True):
      replicaMsg("Client request is a new request.")
      if(myReplicaType=="HEAD"):
        result = doWork(workload['operation'])
        saveToClientWork(workload, result)
        shuttle_object = create_shuttle_object(workload)
        addMyStatements(shuttle_object, result)
        addToResultCache( workload['id'], result )
        if( post is None ):
          replicaMsg("Head is the only node.!")
          replicaMsg("Adding to cache.")
          cacheWorkload( shuttle_object )
          client_response_object = create_cli_res_obj(shuttle_object, result)
          send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
          replicaMsg("Sent Operation_Response to client.", client_response_object)
        else:
          addToTimeOut( workload )
          send(('Shuttle', shuttle_object), to=post)
          replicaMsg("Sent Shuttle to next node.", shuttle_object)
          # send checkpoint proof
          if(slot%checkpt_interval==0):
            checkpt_object = create_checkpt_obj()
            addMyState(checkpt_object)
            send(('CheckPoint', checkpt_object), to=post)
            replicaMsg("Sent CheckPoint to next node.", checkpt_object)
      else:
        send(('Forwarded_Operation', encrypted_workload), to=replica_sequence[0])
        addToTimeOut( workload )
        replicaMsg("Client new request received on a non-head replica. Forwarding request to head.", encrypted_workload)

  def doWork(work):
    replicaMsg("Replica performing operation= "+ work)
    matchObj = re.match( r'\s*(put|get|append|slice)\((.*)\)\s*', work)

    # if no valid operation or first operator is found
    if( (not matchObj.group()) or (not matchObj.group(1)) or (not matchObj.group(2)) ):
      return 'fail'

    operand_str = matchObj.group(2).strip()

    if(matchObj.group(1) == 'put'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      objDict[matchObj.group(1)] = matchObj.group(2)
      return 'OK'

    if(matchObj.group(1) == 'get'):
      matchObj = re.match( r'\'(.*)\'.*', operand_str)
      if( matchObj.group(1) in objDict.keys() ):
        return objDict[matchObj.group(1)]
      else:
        return ''

    if(matchObj.group(1) == 'append'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not matchObj.group(1) in objDict.keys() ):
        return 'fail'
      else:
        objDict[ matchObj.group(1) ] += matchObj.group(2)
        return 'OK'

    if(matchObj.group(1) == 'slice'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not matchObj.group(1) in objDict.keys() ):
        return 'fail'
      else:
        # TODO, add valid slice length check here
        indicesObj = re.match( r'(.*):(.*)', matchObj.group(2))
        index1 = int( indicesObj.group(1) )
        index2 = int( indicesObj.group(2) )
        objDict[ matchObj.group(1) ] = objDict[ matchObj.group(1) ][ index1:index2 ]
        return 'OK'

    return ''

  def saveToClientWork(workload, result):
    last_client_result[ workload['requester'] ] = {
      'id': workload['id'],
      'result': result
    }

  def doTempWork(work):
    replicaMsg("Replica performing operation= "+ work)
    matchObj = re.match( r'\s*(put|get|append|slice)\((.*)\)\s*', work)

    # if no valid operation or first operator is found
    if( (not matchObj.group()) or (not matchObj.group(1)) or (not matchObj.group(2)) ):
      return 'fail'

    operand_str = matchObj.group(2).strip()

    if(matchObj.group(1) == 'put'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      tempObjDict[matchObj.group(1)] = matchObj.group(2)
      return 'OK'

    if(matchObj.group(1) == 'get'):
      matchObj = re.match( r'\'(.*)\'.*', operand_str)
      if( matchObj.group(1) in tempObjDict.keys() ):
        return tempObjDict[matchObj.group(1)]
      else:
        return ''

    if(matchObj.group(1) == 'append'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not matchObj.group(1) in tempObjDict.keys() ):
        return 'fail'
      else:
        tempObjDict[ matchObj.group(1) ] += matchObj.group(2)
        return 'OK'

    if(matchObj.group(1) == 'slice'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not matchObj.group(1) in tempObjDict.keys() ):
        return 'fail'
      else:
        # TODO, add valid slice length check here
        indicesObj = re.match( r'(.*):(.*)', matchObj.group(2))
        index1 = int( indicesObj.group(1) )
        index2 = int( indicesObj.group(2) )
        tempObjDict[ matchObj.group(1) ] = tempObjDict[ matchObj.group(1) ][ index1:index2 ]
        return 'OK'

    return ''

  def getSigned(string):
    return my_private_key.sign( string )

  def cryptoEncode(string):
    return nacl.encoding.HexEncoder.encode( getByteForm(string) )

  def create_shuttle_object(workload):
    slot += 1           # head should increment this
    replicaMsg("New shuttle object created with slot="+str(slot))
    shuttle_object = {
      'slot': slot,
      'client_workload': workload,
      'order_proof': {
        'slot': slot,
        'operation': workload['operation'],
        'configID': config_ID,
        'order_statements': []
      },
      'result_proof': {
        'operation': workload['operation'],
        'result_hashes': []
      }
    }
    return shuttle_object

  def create_checkpt_obj():
    checkpt_no += 1
    replicaMsg("New checkpoint object created with checkpt_no="+str(checkpt_no))
    obj = {
      'checkpt_no': checkpt_no,
      'history_len': [],
      'checkpt_statements': []
    }
    return obj

  def addMyState(checkpt_object):
    hist_len = len(history)
    checkpt_stmt = getSigned( pickle.dumps(objDict) )
    history.append( (checkpt_object['checkpt_no'], hist_len, checkpt_stmt) )
    checkpt_object['history_len'].append( hist_len )
    checkpt_object['checkpt_statements'].append( checkpt_stmt )
    replicaMsg("Added my CheckPoint statements.")

  def addMyStatements(shuttle_object, result):
    operation = shuttle_object['client_workload']['operation']
    history.append((slot, operation));

    # inject failure of change operation
    if(changeOpFlag):
      replicaMsg("[Error Injection] Change Operation Flag is true.!")
      operation = "get(x)"
      changeOpFlag = False

    # inject failure of change result
    if(changeResultFlag and myReplicaType=='TAIL'):
      replicaMsg("[Error Injection] Change Result Flag is true.!")
      result = "OK"
      changeResultFlag = False

    my_order_statement = {
      'slot': slot,
      'operation': operation
    }
    my_result_hash = {
      'operation': operation,
      'result_hash': cryptoEncode(result)
    }

    signedOrderStat = getSigned( pickle.dumps(my_order_statement) )
    if invalidOrderSigFlag:
      replicaMsg("[Error Injection] Change first byte of signed order statement.!")
      signedlist = list(signedOrderStat)
      signedlist[0] = (signedlist[0] + 1) % 256
      signedOrderStat = bytes(signedlist)
      invalidOrderSigFlag = False

    signedResultStat = getSigned( pickle.dumps(my_result_hash) )
    if invalidResultSigFlag and myReplicaType!="TAIL":
      replicaMsg("[Error Injection] Change first byte of signed order statement.!")
      signedlist = list(signedResultStat)
      signedlist[0] = (signedlist[0] + 1) % 256
      signedResultStat = bytes(signedlist)
      invalidResultSigFlag = False

    shuttle_object['order_proof']['order_statements'].append( signedOrderStat )
    shuttle_object['result_proof']['result_hashes'].append( signedResultStat )

    # inject failure of drop result statement of head
    if(dropResStmtFlag and myReplicaType=='TAIL'):
      replicaMsg("[Error Injection] Drop Result Statement Flag is true.!")
      shuttle_object['result_proof']['result_hashes'] = shuttle_object['result_proof']['result_hashes'][1:]
      dropResStmtFlag = False
    replicaMsg("Added my order and result statements.")

  def validateShuttleObject( shuttle_object, shuttle_type='forward'):

    # 1. look for slot holes
    if(shuttle_type == 'forward'):
      if( shuttle_object['slot'] != slot+1 ):
        print("Found hole in slot.")
        return False
    else:
      if( shuttle_object['slot'] != reverse_slot+1 ):
        print("Found hole in slot.")
        return False

    # 2. validate size of both proofs same or not
    order_statements = shuttle_object['order_proof']['order_statements']
    result_hashes = shuttle_object['result_proof']['result_hashes']
    if( len(order_statements) != len(result_hashes) ):
      print("Size of order_proof and result_proof arrays do not match.")
      return False

    # 3. validate signature and then contents
    common_result_hash = b''
    common_slot = 0
    common_operation = ''
    for counter in range(0, len(order_statements)):
      # validate signature first
      public_key = sign_verify_keys[counter]
      try:
        decrypted_order_stat = public_key.verify( order_statements[counter] )
        decrypted_res_hsh = public_key.verify( result_hashes[counter] )
      except nacl.exceptions.BadSignatureError:
        print("Signature of replica '"+str(counter)+"'' did not match.")
        return False

      # validate the order statement
      unpickled_order_stat = pickle.loads(decrypted_order_stat)
      if(counter == 0):
        common_slot = unpickled_order_stat['slot']
        common_operation = unpickled_order_stat['operation']
      else:
        if(unpickled_order_stat['slot'] != common_slot):
          print("Slot in order statement of replica '"+str(counter)+"'' did not match.")
          return False
        if(unpickled_order_stat['operation'] != common_operation):
          print("Operation in order statement of replica '"+str(counter)+"'' did not match.")
          return False

      # validate the result statement
      unpickled_result_hash = pickle.loads(decrypted_res_hsh)['result_hash']
      if(counter == 0):
        common_result_hash = unpickled_result_hash
      else:
        if(unpickled_result_hash != common_result_hash):
          print("Result hash in result statement of replica '"+str(counter)+"'' did not match.")
          return False

    # if control reaches here, means valid shuttle
    # do necessary operations
    if(shuttle_type == 'forward'):
      slot += 1
    else:
      reverse_slot += 1

    return True

  def validateCheckPtObject( checkpt_object, checkpt_type='forward'):

    if(checkpt_type == 'forward'):
      # 1. look for slot holes
      if( checkpt_object['checkpt_no'] != checkpt_no+1 ):
        print("Found hole in checkpoint slot.")
        return False
      if(slot%checkpt_interval!=0):
        replicaMsg("Should not be receiving checkpoint message now.!")
        return False

    # 2. validate size of both proofs same or not
    if( len(checkpt_object['history_len']) != len(checkpt_object['checkpt_statements']) ):
      print("Size of history_len and checkpt_statements arrays do not match.")
      return False

    # 3. validate signature and then contents
    myObjPickle = pickle.dumps(objDict)
    history_lens = checkpt_object['history_len']
    checkpt_statements = checkpt_object['checkpt_statements']
    for counter in range(0, len(checkpt_statements)):
      # validate signature first
      public_key = sign_verify_keys[counter]
      try:
        decrypted_checkpt_stat = public_key.verify( checkpt_statements[counter] )
      except nacl.exceptions.BadSignatureError:
        print("Signature of replica '"+str(counter)+"'' did not match.")
        return False

      # validate with my own picke of myDict
      if(checkpt_type == 'forward'):
        if(myObjPickle!=decrypted_checkpt_stat):
          print("State of replica '"+str(counter)+"'' did not match.")
          return False
        # 2. check if my history len is same as previous replicas
        if( history_lens[counter] != len(history) ):
          print("Found hole in history length.")
          return False

    # if control reaches here, means valid shuttle
    # do necessary operations
    if(checkpt_type == 'forward'):
      checkpt_no += 1

    return True

  def clientUnsignWorkload(workload):
    if workload['requester'] in client_public_keys:
      public_key = client_public_keys[ workload['requester'] ]
      try:
        decrpyted_workload = public_key.verify(workload['encrypted_workload'])
      except nacl.exceptions.BadSignatureError:
        print("Signature of client did not match.")
        return False
      unpickled_workload = pickle.loads(decrpyted_workload)
      unpickled_workload['requester'] = workload['requester']
      unpickled_workload['retransmit'] = workload['retransmit']  # this is temp, need to be set by client ideally
      # output(unpickled_workload)
    else:
      print("No public key found for client's request")
      return False
    return unpickled_workload

  def create_cli_res_obj(shuttle_object, result):
    client_response_object = {
      'sender': self,
      'client_workload': shuttle_object['client_workload'],
      'result': result,
      'result_proof': shuttle_object['result_proof']['result_hashes']
    }
    if invalidResultSigFlag and myReplicaType=="TAIL":
      replicaMsg("[Error Injection] Change first byte of signed order statement.!")
      signedlist = list(client_response_object['result_proof'][-1])
      signedlist[0] = (signedlist[0] + 1) % 256
      client_response_object['result_proof'][-1] = bytes(signedlist)
      invalidResultSigFlag = False

    return client_response_object

  def create_reverse_shuttle_object( shuttle_object ):
    return shuttle_object

  def addToResultCache(request_id, result):
    result_cache[request_id] = result

  def cacheWorkload( reverse_shuttle_object ):
    replicaMsg("Added client_response_object to cache.")
    client_workload_id = reverse_shuttle_object['client_workload']['id']
    result = result_cache[ client_workload_id ]
    del result_cache[ client_workload_id ]
    client_response_object = create_cli_res_obj(reverse_shuttle_object, result)
    response_cache[ client_workload_id ] = client_response_object

  def inResultCache( workload ):
    return workload['id'] in result_cache

  def inCache( workload ):
    return workload['id'] in response_cache

  def getCache( workload ):
    return response_cache[ workload['id'] ]

  def addToTimeOut( workload , sendClientResponse=False):
    timeout[ workload['id'] ] = {
      'time': time.time(),
      'sendClientResponse': sendClientResponse,
      'reconfig_raised': False
    }

  def presentInTimeOut( reverse_shuttle_object ):
    return reverse_shuttle_object['client_workload']['id'] in timeout

  def revShuttleClientResponseNeeded( reverse_shuttle_object ):
    return timeout[reverse_shuttle_object['client_workload']['id']]['sendClientResponse']

  def deleteEntryInTimeOut( workload_id ):
    replicaMsg("Deleted '"+workload_id+"' from timeout.")
    del timeout[ workload_id ]

  def parseFailures( failures ):
    failure_map = {
      'client_request': {},
      'forwarded_request': {},
      'shuttle': {},
      'result_shuttle': {},
      'wedge_request': {},
      'checkpoint': {},
      'completed_checkpoint': {},
      'get_running_state': {},
      'catch_up': {},
    }

    if(not failures):
      return failure_map

    split_arr = failures.split(';')
    for failure in split_arr:
      if failure.count(',') > 1:
        matchObj = re.match( r'\s*(client_request|forwarded_request|shuttle|result_shuttle)\(([^,]*),([^\)]*)\),([^\()]*)\((.*)\)\s*', failure)
        log_type = matchObj.group(1)
        client_ID = int( matchObj.group(2) )
        message_count = int( matchObj.group(3) )
        trigger_type = matchObj.group(4)
        if( matchObj.group(5) ):
          trigger_type += ':' + matchObj.group(5)
        if( client_ID in failure_map[log_type].keys() ):
          if( message_count in failure_map[log_type][client_ID].keys() ):
            failure_map[log_type][client_ID][message_count].append( trigger_type )
          else:
            failure_map[log_type][client_ID][message_count] = [ trigger_type ]
        else:
          failure_map[log_type][client_ID] = {message_count: [trigger_type] }
      else:
        matchObj = re.match( r'\s*(wedge_request|checkpoint|completed_checkpoint|get_running_state|catch_up)\(([^\)]*)\),([^\()]*)\((.*)\)\s*', failure)
        log_type = matchObj.group(1)
        message_count = int( matchObj.group(2) )
        trigger_type = matchObj.group(3)
        if( matchObj.group(4) ):
          trigger_type += ':' + matchObj.group(4)
        if( message_count in failure_map[log_type].keys() ):
          failure_map[log_type][message_count].append( trigger_type )
        else:
          failure_map[log_type] = {message_count: [trigger_type] }

    return failure_map

  def incrementCountLog(log_type, client_name=False):
    if client_name:
      client_ID = client_seq_no[client_name]
      if( client_ID in count_log[log_type].keys() ):
        count_log[log_type][client_ID] += 1
      else:
        count_log[log_type][client_ID] = 1
      replicaMsg("Log count for '"+ log_type + "', client=" + str(client_ID) + ",count="+str(count_log[log_type][client_ID]))
      # check if now any failure flag needs to be set
      setFailureFlag(log_type, count_log[log_type][client_ID], client_passed=True, client_ID=client_ID)
    else:
      count_log[log_type] += 1
      replicaMsg("Log for '"+ log_type + "', count="+str(count_log[log_type]))
      setFailureFlag(log_type, count_log[log_type], client_passed=False)

  def setFailureFlag(log_type, message_count, client_passed, client_ID=False):
    try:
      if client_passed:
        trigger_types = failure_map[log_type][client_ID][message_count]
        replicaMsg("[Fault Injection] Condition matched for '"+log_type+"', client="+str(client_ID)+", message="+str(message_count)+".!")
      else:
        trigger_types = failure_map[log_type][message_count]
        replicaMsg("[Fault Injection] Condition matched for '"+log_type+", message="+str(message_count)+".!")
    except KeyError:
      return
    for trigger_type in trigger_types:
      trigger_type.strip()
      if(trigger_type == 'change_operation'):
        changeOpFlag = True
      if(trigger_type == 'change_result'):
        changeResultFlag = True
      if(trigger_type == 'drop_result_stmt'):
        dropResStmtFlag = True
      if(trigger_type == 'crash'):
        crashFlag = True
      if(trigger_type == 'drop'):
        ignoreThisMsg = True
      if(trigger_type == 'increment_slot'):
        if myReplicaType=='HEAD':
          replicaMsg("[Error Injection] Slot incremented for HEAD node.!")
          slot += 1
      if(trigger_type == 'extra_op'):
        replicaMsg("[Error Injection] Performing extra op for the node.!")
        doWork("put('a','a')")
      if(trigger_type == 'invalid_order_sig'):
        invalidOrderSigFlag = True
      if(trigger_type == 'invalid_result_sig'):
        invalidResultSigFlag = True
      if(trigger_type == 'drop_checkpt_stmts'):
        dropCheckptStmtFlag = True
      if('truncate_history' in trigger_type): # check substring
        action, value = trigger_type.split(':')
        truncateHistFlag = True
        truncateHistVal = value
      if('sleep' in trigger_type):            # check substring
        action, value = trigger_type.split(':')
        time.sleep( int(value) )

  def replicaMsg(heading, dict={}, msg_type='action'):
    if(msg_type=='imp'):
      # output("\n==============================================================")
      pass
    # output("["+str(self)+"]["+ str(myPosition) + "] - " + heading)
    output("["+ str(config_ID) +"]"+"["+ str(myPosition) + "] - " + str(heading) )
    if(dict):
      output("["+ str(config_ID) +"]"+"["+ str(myPosition) + "] - " + str(dict) )

  def makeChangesToReverseShuttle(reverse_shuttle_object):
    #currently only used for fault injection

    if(changeResultFlag):
      replicaMsg("[Error Injection] Change Result Flag is true.!")
      my_result_hash = reverse_shuttle_object['result_proof']['result_hashes'][myPosition]
      decrypted_result_hash = sign_verify_keys[myPosition].verify( my_result_hash )
      unpickled_result_hash = pickle.loads(decrypted_result_hash)
      unpickled_result_hash['result_hash'] = cryptoEncode("OK")
      reverse_shuttle_object['result_proof']['result_hashes'][myPosition] = getSigned( pickle.dumps(unpickled_result_hash) )
      changeResultFlag = False

    # inject failure of drop result statement of head
    if(dropResStmtFlag):
      replicaMsg("[Error Injection] Drop Result Statement Flag is true.!")
      reverse_shuttle_object['result_proof']['result_hashes'] = reverse_shuttle_object['result_proof']['result_hashes'][1:]
      dropResStmtFlag = False

    return reverse_shuttle_object

  def workableState():
    if (state == 'OK'):
      return True
    else:
      return False

  def createWedgeResponseObject():
    obj = {
      'config_ID': config_ID,
      'myPosition': myPosition,
      'history': history,
      'lastest_checkpt': lastest_checkpt,
      'latest_checkpt_proof': latest_checkpt_proof
    }
    if truncateHistFlag and truncateHistVal>0:
      replicaMsg("[Error Injection] History truncated for wedge response.!")
      obj['history'] = obj['history'][:-truncateHistVal]
      truncateHistFlag =  False
      truncateHistVal = 0
    return obj

  def updateHistoryForCheckPoint(checkpt_object):
    index = 0
    for entry in history:
      if( len(entry)!=3 ):
        index += 1
      else:
        break
    history = history[index:]
    latest_checkpt_proof = checkpt_object['checkpt_statements']
    lastest_checkpt = checkpt_object['checkpt_no']
    replicaMsg("History before checkpt_no="+str(checkpt_object['checkpt_no'])+" deleted.!")

  def ignoreMsg():
    if ignoreThisMsg:
      replicaMsg("[Error Injection] Drop Message Flag is true.!")
      ignoreThisMsg = False
      return True
    return False

  def sendReconfigToOlympus():
    send(('Reconfig_Request', config_ID), to=olympus)
    replicaMsg("Sent Reconfig_Request to olympus.\n\n")

############################################
#  Received messages handler
############################################
  # handle operation requests from client
  def receive( msg=('Operation', encrypted_workload), from_=client ):
    replicaMsg("Received Operation request from client. Workload = ", encrypted_workload, msg_type='imp')
    if ( not workableState() ):
      replicaMsg("Not in OK state.!")
      return

    incrementCountLog('client_request', client)   # log message received from this client
    if ignoreMsg():
      return

    handleWorkload( encrypted_workload )          # do the workload
    replicaMsg("\n\n")

  # handle operation requests from client
  def receive( msg=('Forwarded_Operation', encrypted_workload), from_=replica_set ):
    replicaMsg("Received Forwarded_Operation request from a replica. Workload = ", encrypted_workload, msg_type='imp')
    if ( not workableState() ):
      replicaMsg("Not in OK state.!")
      return

    incrementCountLog('forwarded_request', encrypted_workload['requester'])   # log message received from this client
    if ignoreMsg():
      return

    handleWorkload( encrypted_workload )                                      # do the workload
    replicaMsg("\n\n")

  # handle shuttle messages from other replicas
  def receive( msg=('Shuttle', shuttle_object), from_=replica_set ):
    # replicaMsg("Received Shuttle slot="+str(shuttle_object['slot'])+". Shuttle_Object=", shuttle_object, msg_type='imp')
    replicaMsg("Received Shuttle slot="+str(shuttle_object['slot'])+".", shuttle_object, msg_type='imp')
    incrementCountLog('shuttle', shuttle_object['client_workload']['requester'] )   # log the shuttle message received for this client
    if ignoreMsg():
      return

    if ( not workableState() ):
      replicaMsg("Not in OK state.!")
      return

    # check if any checkpoint is missed before this slot

    # validate shuttle first
    if( not validateShuttleObject(shuttle_object) ):
      replicaMsg("Validation failed for shuttle_object.!")
      sendReconfigToOlympus()
      return
    replicaMsg("Validation success for shuttle_object.")

    # perform the operation and get the result
    result = doWork(shuttle_object['client_workload']['operation'])
    saveToClientWork(shuttle_object['client_workload'], result)
    # check if result matches with the crypto hash
    addMyStatements(shuttle_object, result)
    addToResultCache( shuttle_object['client_workload']['id'], result )

    # take further action based on replica type
    if( myReplicaType=='TAIL' ):
      replicaMsg("I am TAIL.")

      # fault injection via sleeping
      if( 'sleep_before_send' in config.keys() ):
        time.sleep( int(config['sleep_before_send']) )

      # fault injection for skipping response sending to client by TAIL
      if( 'skip_tail_reply' in config.keys() and config['skip_tail_reply']):
        pass
      else:
        # send response to client
        client_response_object = create_cli_res_obj(shuttle_object, result)
        send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
        replicaMsg("Sent Operation_Response to client.", client_response_object)

      # start reverse shuttle
      reverse_shuttle_object = create_reverse_shuttle_object( shuttle_object )
      cacheWorkload( reverse_shuttle_object )
      send(('Reverse_Shuttle', reverse_shuttle_object), to=pre)
      replicaMsg("Sent Reverse_Shuttle to previous replica.", reverse_shuttle_object)
    else:
      # inner node will forward shuttle to succeding replica
      send(('Shuttle', shuttle_object), to=post)
      replicaMsg("Forward Shuttle to the next replica.", shuttle_object)
    replicaMsg("\n\n")

  # handle reverse shuttle messages from other replicas
  def receive( msg=('Reverse_Shuttle', reverse_shuttle_object), from_=replica_set ):
    replicaMsg("Received Reverse_Shuttle slot="+str(reverse_shuttle_object['slot'])+".", reverse_shuttle_object, msg_type='imp')
    incrementCountLog('result_shuttle', reverse_shuttle_object['client_workload']['requester'] )    # log the shuttle message received for this client
    if ignoreMsg():
      return

    if ( not workableState() ):
      replicaMsg("Not in OK state.!")
      return

    # validate shuttle first
    if( not validateShuttleObject(reverse_shuttle_object, shuttle_type='reverse') ):
      replicaMsg("Validation failed for shuttle_object.!")
      sendReconfigToOlympus()
      return
    replicaMsg("Validation success for shuttle_object.")

    cacheWorkload( reverse_shuttle_object )       # cache the workload for retransmit in future

    # also check if this operation is in timeout handler array
    if( presentInTimeOut(reverse_shuttle_object) ):
      if revShuttleClientResponseNeeded(reverse_shuttle_object):
        replicaMsg("Client request found in timeout for this reverse shuttle.")
        client_response_object = getCache( reverse_shuttle_object['client_workload'] )
        send(('Operation_Response', client_response_object), to=client_response_object['client_workload']['requester'])
        replicaMsg("Sent retransmitted Operation_Response to client.", client_response_object)
      deleteEntryInTimeOut( reverse_shuttle_object['client_workload']['id'] )

    # forward to previous replica, if not head
    if( myReplicaType!='HEAD' and pre ):
      reverse_shuttle_object = makeChangesToReverseShuttle( reverse_shuttle_object )
      send(('Reverse_Shuttle', reverse_shuttle_object), to=pre)
      replicaMsg("Sent Reverse_Shuttle to previous replica.", reverse_shuttle_object)
    replicaMsg("\n\n")

  # handle checkpoint messages from other replicas
  def receive( msg=('CheckPoint', checkpt_object), from_=replica_set ):
    replicaMsg("Received CheckPoint="+str(checkpt_object['checkpt_no'])+".", checkpt_object, msg_type='imp')
    incrementCountLog('checkpoint')
    if ignoreMsg():
      return

    if ( not workableState() ):
      replicaMsg("Not in OK state.!")
      return

    # validate shuttle first
    if( not validateCheckPtObject(checkpt_object) ):
      replicaMsg("Valid`t.!")
      sendReconfigToOlympus()
      return
    replicaMsg("Validation success for checkpt_object.")

    # perform the actions
    addMyState(checkpt_object)

    # take further action based on replica type
    if( myReplicaType=='TAIL' ):
      replicaMsg("I am TAIL.")
      # start reverse shuttle
      updateHistoryForCheckPoint( checkpt_object )
      send(('Reverse_CheckPoint', checkpt_object), to=pre)
      replicaMsg("Sent Reverse_CheckPoint to previous replica.", checkpt_object)
    else:
      # inner node will forward shuttle to succeding replica
      send(('CheckPoint', checkpt_object), to=post)
      replicaMsg("Forward CheckPoint to the next replica.", checkpt_object)
    replicaMsg("\n\n")

  # handle reverse checkpoint messages from other replicas
  def receive( msg=('Reverse_CheckPoint', checkpt_object), from_=replica_set ):
    replicaMsg("Received Reverse_CheckPoint slot="+str(checkpt_object['checkpt_no'])+".", checkpt_object, msg_type='imp')
    incrementCountLog('completed_checkpoint')
    if ignoreMsg():
      return

    if ( not workableState() ):
      replicaMsg("Not in OK state.!")
      return

    # validate shuttle first
    if( not validateCheckPtObject(checkpt_object, checkpt_type='reverse') ):
      replicaMsg("Validation failed for checkpt_object.!")
      sendReconfigToOlympus()
      return
    replicaMsg("Validation success for checkpt_object.")

    updateHistoryForCheckPoint( checkpt_object )       # cache the workload for retransmit in future

    # forward to previous replica, if not head
    if( myReplicaType!='HEAD' and pre ):
      if dropCheckptStmtFlag:
        replicaMsg("[Error Injection] CheckPoint statements for first t+1 replicas dropped.!")
        checkpt_object['checkpt_statements'] = checkpt_object['checkpt_statements'][fault_tolerance_factor+1:]
        dropCheckptStmtFlag = False
      send(('Reverse_CheckPoint', checkpt_object), to=pre)
      replicaMsg("Sent Reverse_CheckPoint to previous replica.", checkpt_object)
    replicaMsg("\n\n")

  # handle requests from olympus
  def receive( msg=('Wedge_Request'), from_=olympus ):
    replicaMsg("Received Wedge_Request from olympus.", msg_type='imp')
    incrementCountLog('wedge_request')
    if ignoreMsg():
      return

    state = 'IMMUTABLE'
    wedgeRespObj = createWedgeResponseObject()
    send(('Wedge_Response', wedgeRespObj), to=olympus)
    replicaMsg("Sent Wedge_Response to olympus.", msg_type='imp')
    replicaMsg("\n\n")

  # handle catch up request
  def receive( msg=('CatchUp_Request', catchup_object), from_=olympus ):
    replicaMsg("Received CatchUp_Request from olympus.", catchup_object, msg_type='imp')
    incrementCountLog('catch_up')
    if ignoreMsg():
      return

    if ( workableState() ):
      replicaMsg("Cannot do CatchUp_Request in OK state.!")
      return

    operations = catchup_object['operations']
    tempObjDict = objDict
    for operation in operations:
      doTempWork(operation)

    catchup_object['state_encrypted'] = cryptoEncode( json.dumps(tempObjDict) )
    catchup_object['last_client_result'] = last_client_result
    send(('CatchUp_Response', catchup_object), to=olympus)
    replicaMsg("Sent CatchUp_Response to olympus.", catchup_object)
    output("\n\n")

  # handle get state request
  def receive( msg=('Get_State'), from_=olympus ):
    replicaMsg("Received Get_State from olympus.", msg_type='imp')
    incrementCountLog('get_running_state')
    if ignoreMsg():
      return

    if ( workableState() ):
      replicaMsg("Cannot do Get_State in OK state.!")
      return

    send(('Get_State_Response', tempObjDict), to=olympus)
    replicaMsg("Sent Get_State_Response to olympus.", tempObjDict)
    output("\n\n")

  # handle message to die
  def receive( msg=('Suicide'), from_=olympus ):
    replicaMsg("Olympus asked me to die. :/ ", msg_type='imp')
    crashFlag = True
    silent = True
    logging.shutdown()
    # os._exit(-1)
