import re
import uuid
import time
import pickle
import nacl.encoding
import nacl.signing
import random

# define the client process
class Node(process):

############################################
# Necessary functions setup and run
############################################
  # define the setup for the client
  def setup(olympus, private_key, workload_string, client_timeout, fault_tolerance_factor, myPosition):
    self.olympus = olympus
    self.replica_sequence = ()
    self.sequence_head = False
    self.operations_array = partitionWorkLoad( workload_string )
    self.client_timeout = client_timeout
    self.timeout = {}
    self.sign_verify_keys = []
    self.private_key = private_key
    self.fault_tolerance_factor = fault_tolerance_factor
    self.objDict = {}
    self.waitForResponse = False
    self.waitingForConfigResult = False
    self.config_ID = -1
    self.myResult = ''
    self.waitGetConfig = False

    self.ignoreTimeout = False # for debugging simplicity
    self.reconfigAfterOpsFlag = False # for debugging simplicity

  # main execution flow of the client
  def run():
    while(True):
      # if no replica_sequence get that first
      if not replica_sequence and not waitGetConfig:
        send(('GetConfig',), to=olympus)
        clientMsg("Sent GetConfig request to olympus.\n\n")
        waitGetConfig = True

      # check if any entry in timeout_array has expired
      if(not ignoreTimeout):
        for key, value in timeout.items():
          now = time.time()
          difference = int(now - value['time'])
          difference *= 1000
          if(difference > client_timeout):
            # first check if sequence has changed
            clientMsg("Timeout expired for request=", key)
            if not waitingForConfigResult:
              send(('GetConfig',), to=olympus)
              clientMsg("Sent GetConfig request to olympus.\n\n")
              waitingForConfigResult = True
            while waitingForConfigResult:
              --response_from_olympus

            # if sequence has changed
            if not value['config_ID']==config_ID:
              clientMsg("Config has changed for replicas.")
              timeout[key]['workload']['retransmit'] = 0
              workload = timeout[key]['workload']
              send(('Operation', workload), to=sequence_head)
              clientMsg("Sent Operation request to new replica head.", workload)
              timeout[key]['time'] = time.time()  #reset the timer
            # if sequence has not changed
            else:
              clientMsg("Config has not changed for replicas.")
              if( value['workload']['retransmit'] == 1 ):
                clientMsg("Timeout expired for retransmitted request=", key)
                # workload = timeout[key]['workload']
                # send(('Operation', workload), to=replica_sequence)
                # clientMsg("Sent Operation request to all replicas.", workload)
              else:
                timeout[key]['workload']['retransmit'] = 1
                workload = timeout[key]['workload']
                send(('Operation', workload), to=replica_sequence)
                clientMsg("Sent Operation request to all replicas.", workload)
                timeout[key]['time'] = time.time()  #reset the timer
              clientMsg("\n\n")

      # yield point to receive messages
      --accept_msgs

      # send operation request to replica head
      if replica_sequence and operations_array and (not waitForResponse):
        op = operations_array[0]
        myResult = doWork(op);
        workload = create_workload_object(op)
        operations_array.pop(0)
        send(('Operation', workload), to=sequence_head)
        clientMsg("Sent Operation request to replica head.", op)
        clientMsg(workload)
        addToTimeOut( workload )        # append to timeout array with timestamp
        waitForResponse = True
        clientMsg("\n\n")

      # if no operations left, wait for all responses
      if (not operations_array):
        if(reconfigAfterOpsFlag):
          proof = {}
          send(('Reconfig_Request', proof, proof), to=olympus)
          clientMsg("Reconfig_Request sent to Olympus.\n\n")
          reconfigAfterOpsFlag = False
        # break

    # output client copy of dictionary
    clientMsg(objDict)


############################################
#  Helper Functions
############################################
  # add client unique identifier
  # add own address
  def doWork(work):
    clientMsg("Client performing operation= "+ work)
    matchObj = re.match( r'\s*(put|get|append|slice)\((.*)\)\s*', work)

    # if no valid operation or first operator is found
    if( (not matchObj.group()) or (not matchObj.group(1)) or (not matchObj.group(2)) ):
      return 'fail'

    operand_str = matchObj.group(2).strip()

    if(matchObj.group(1) == 'put'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      objDict[matchObj.group(1)] = matchObj.group(2)
      return 'OK'

    if(matchObj.group(1) == 'get'):
      matchObj = re.match( r'\'(.*)\'.*', operand_str)
      if( matchObj.group(1) in objDict.keys() ):
        return objDict[matchObj.group(1)]
      else:
        return ''

    if(matchObj.group(1) == 'append'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not matchObj.group(1) in objDict.keys() ):
        return 'fail'
      else:
        objDict[ matchObj.group(1) ] += matchObj.group(2)
        return 'OK'

    if(matchObj.group(1) == 'slice'):
      matchObj = re.match( r'\'(.*)\'\s*,\s*\'(.*)\'', operand_str)
      if( not matchObj.group(1) in objDict.keys() ):
        return 'fail'
      else:
        # TODO, add valid slice length check here
        indicesObj = re.match( r'(.*):(.*)', matchObj.group(2))
        index1 = int( indicesObj.group(1) )
        index2 = int( indicesObj.group(2) )
        objDict[ matchObj.group(1) ] = objDict[ matchObj.group(1) ][ index1:index2 ]
        return 'OK'

    return ''

  def create_workload_object(operation):
    print(operation)
    workload_to_be_encrpyted = {
      'id': uuid.uuid4().hex,
      'operation': operation,
      'retransmit': 0
    }
    final_workload = {
      'requester': self,
      'id': workload_to_be_encrpyted['id'],
      'retransmit': workload_to_be_encrpyted['retransmit'],
      'encrypted_workload': private_key.sign( pickle.dumps(workload_to_be_encrpyted) )
    }
    return final_workload

  def getByteForm(string, encoding_format='utf-8'):
    return bytes(string, encoding=encoding_format)

  def cryptoEncode(string):
    return nacl.encoding.HexEncoder.encode( getByteForm(string) )

  def validateResponse( client_response_object ):
    result_hashes = client_response_object['result_proof']
    if( len(result_hashes) != len(replica_sequence) ):
      print("Result hashes count does not match replicas count.")
      return False

    common_result_hash = cryptoEncode( client_response_object['result'] )
    common_operation = ''
    verified_count = 0
    for counter in range(0, len(result_hashes)):
      # validate signature first
      public_key = sign_verify_keys[counter]
      try:
        decrypted_res_hsh = public_key.verify( result_hashes[counter] )
      except nacl.exceptions.BadSignatureError:
        print("Signature of replica '"+str(counter)+"'' did not match.")
        return False

      # validate the result statement
      unpickled_result_hash = pickle.loads(decrypted_res_hsh)['result_hash']
      if(counter == 0):
        common_result_hash = unpickled_result_hash
      else:
        if(unpickled_result_hash != common_result_hash):
          print("Result hash in result statement of replica '"+str(counter)+"'' did not match.")
          return False
      verified_count += 1
      if(verified_count > fault_tolerance_factor):
        return True
    return True

  def getPseudoRandomWorkLoad(seed, count):
    if(count==0):
      return []

    seed = int( int(seed) / int(count) )
    op_array  = ["put", "get", "slice", "append"]
    key_array = ["movie", "course", "teacher", "jedi", "sith", "drinks", "burgers", "pasta", "car brand", "laptop brand", "banks", "cell phone brand"]
    val_array = ["Inception", "Titanic", "Pacific Rim", "Moana", "Spider Man",
           "Asynchronous", "Computer Vision", "Computer Graphics", "Algorithm", "Machine Learning",
           "Roy Shilkrot", "Scott Stoller", "Leo Bachmair", "Micheal Bender", "Xiaojun Bi",
           "Kit Fisto", "Mace Windu", "Ki-Adi-Mundi", "Qui-Gon Jinn", "Plo Koon",
           "Darth Maul", "Darth Bane", "Darth Vader", "Revan", "Darth Nihl",
           "Coke", "Pepsi", "Snapple", "Rum", "Soda",
           "McDonald's", "Rice Burger", "Salmon Burger", "Cheese Burger", "Buffalo Burger",
           "Penne", "Orecchiette", "Linguine", "Bucatini", "Orzo",
           "Acura", "Audi", "BMW", "Buick", "Honda",
           "ASUS", "MAC", "Lenovo", "HP", "Dell",
           "Chase", "Citibank", "CapitalOne", "Discover", "BOA",
           "Nokia", "SONY", "Iphone", "HTC", "Samsung"
    ]
    final_workload = []
    random.seed(seed)
    for i in range(0, count):
      op_val = random.randint(0, len(op_array)-1)
      key_val = random.randint(0, len(key_array)-1)
      val_val = random.randint(0, len(val_array)-1)
      op_string = ''
      if (op_array[op_val] == "put" or op_array[op_val] == "append"):
        op_string = op_array[op_val] + "('" + key_array[key_val] + "','" + val_array[val_val] + "')"
      elif (op_array[op_val] == "slice"):
        first = random.randint(0, 10)
        second = random.randint(first, 15)
        op_string = op_array[op_val] + "('" +  key_array[key_val] + "','" + str(first) +":"+ str(second)+ "')"
      elif (op_array[op_val] == "get"):
        op_string = op_array[op_val] + "('" + key_array[key_val] + "')"
      final_workload.append(op_string)
    return final_workload

  def partitionWorkLoad(workload_string):
    workload_array = workload_string.split(';')
    workload_array = [x.strip(' ') for x in workload_array]
    if('pseudorandom' in  workload_array[0]):
      matchObj = re.match( r'\s*pseudorandom\(\s*(.*)\s*,\s*(.*)\s*\)', workload_array[0])
      workload_array = getPseudoRandomWorkLoad( int(matchObj.group(1)), int(matchObj.group(2)) )
    return workload_array

  def addToTimeOut( workload ):
    clientMsg("Request added to timeout DS with current timestamp.")
    timeout[ workload['id'] ] = {
      'time': time.time(),
      'workload': workload,
      'config_ID': config_ID
    }

  def presentInTimeOut( client_response_object ):
    return client_response_object['client_workload']['id'] in timeout

  def deleteEntryInTimeOut( workload_id ):
    del timeout[ workload_id ]

  def getMisbehaviorProof( client_response_object ):
    return client_response_object

  def clientMsg(heading, dict={}, msg_type='action'):
    if(msg_type=='imp'):
      # output("\n==============================================================")
      pass
    # output("["+str(self)+"]["+ str(myPosition) + "] - " + heading)
    output("["+ str(myPosition) + "] - " + str(heading) )
    if(dict):
      output("["+ str(myPosition) + "] - " + str(dict) )

  def resultChecker(result):
    if result == myResult:
      clientMsg("Result received is correct, and matches my own copy.")

############################################
#  Received messages handler
############################################
  def receive(msg=('GetConfig_Response', replica_sequence, sign_verify_keys, config_ID), from_=olympus):
    clientMsg("Received GetConfig_Response from olympus.")
    clientMsg("Replica sequence received from olympus = ", replica_sequence)
    clientMsg("Public Keys received from olympus = ", sign_verify_keys)
    clientMsg("\n\n")
    self.replica_sequence = replica_sequence
    self.sequence_head    = replica_sequence[0]
    self.config_ID        = config_ID
    self.sign_verify_keys = sign_verify_keys
    self.waitingForConfigResult = False
    self.waitGetConfig = False

  def receive(msg=('Olympus_Operation_Response', client_response_object), from_=olympus):
    clientMsg("Received Operation_Response from olympus.", client_response_object)
    # no need to validate response from olympus
    clientMsg("Result received for id=", client_response_object['client_workload']['id'])
    clientMsg("Result received=", client_response_object['client_workload']['result'])
    resultChecker(client_response_object['client_workload']['result'])

    # remove entry in timeout
    if( presentInTimeOut(client_response_object) ):
      deleteEntryInTimeOut( client_response_object['client_workload']['id'] )
      clientMsg("Removed from timeout.")
      waitForResponse = False

    replica_sequence = ()
    clientMsg("\n\n")

  def receive(msg=('Operation_Response', client_response_object), from_=replica_sequence):
    clientMsg("Received Operation_Response from replica.", client_response_object)

    # validate response
    if( not validateResponse(client_response_object) ):
      clientMsg("Validation of response failed.!")
      # proof = getMisbehaviorProof(client_response_object)
      # send(('Reconfig_Request', proof), to=olympus)
      # clientMsg("Sent Reconfig_Request to olympus.", proof)
      return

    if not presentInTimeOut(client_response_object):
      clientMsg("Response already received for this request.\n\n")
      return

    clientMsg("Response validated and found correct.")
    clientMsg("Result received for operation=", client_response_object['result'])
    resultChecker( client_response_object['result'] )

    # remove entry in timeout
    if( presentInTimeOut(client_response_object) ):
      deleteEntryInTimeOut( client_response_object['client_workload']['id'] )
      clientMsg("Removed from timeout.")
      waitForResponse = False
    clientMsg("\n\n")
