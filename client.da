import re
import uuid

# define the client process
class Node(process):


############################################
# Necessary functions setup and run
############################################
  # define the setup for the client
  def setup(olympus, private_key, workload_string):
    self.olympus = olympus
    self.replica_sequence = ()
    self.timeout_array = []
    self.operations_array = partitionWorkLoad( workload_string )

  # main execution flow of the client
  def run():
    if not replica_sequence:
      send(('GetConfig',), to=olympus)
      output("Sent GetConfig request to olympus.")
    while(True):
      # check if any entry in timeout_array has expired
        #if true, send getconfig to olympus
        #if head is still same, retransmit workload to all replicas
        #if head has changed, send same workload to new head and reset timer
      --accept_msgs
      if replica_sequence and operations_array:
        workload = create_workload_object(operations_array[0])
        operations_array.pop(0)
        send(('Operation', workload), to=replica_sequence)
        # append to timeout array with timestamp
        output("Sent operation request to replica")


############################################
#  Helper Functions
############################################
  # add client unique identifier
  # add own address
  def create_workload_object(operation):
    print(operation)
    workload_object = {
      'id': uuid.uuid4().hex,
      'requester': self,
      'operation': operation,
      'retransmit': False
    }
    return workload_object

  def getPseudoRandomWorkLoad(seed, count):
    print(seed)
    print(count)
    return []

  def partitionWorkLoad(workload_string):
    workload_array = workload_string.split(';')
    workload_array = [x.strip(' ') for x in workload_array]
    if('pseudorandom' in  workload_array[0]):
      matchObj = re.match( r'\s*pseudorandom\(\s*(.*)\s*,\s*(.*)\s*\)', workload_array[0])
      workload_array = getPseudoRandomWorkLoad( matchObj.group(1), matchObj.group(2) )
    return workload_array

############################################
#  Received messages handler
############################################
  def receive(msg=('GetConfig_Response', replica_sequence), from_=olympus):
    output("Received GetConfig_Response from olympus.")
    self.replica_sequence = replica_sequence

  def receive(msg=('Operation_Response', client_response_object), from_=replica_sequence):
    output("Received Operation_Response from replica.")
    print(client_response_object['result'])
    print(client_response_object)
