import re
import sys
import os.path
import nacl.encoding
import nacl.signing

Olympus = import_da('olympus')
Replica = import_da('replica')
Client  = import_da('client')

# other configs
config( channel = {'fifo', 'reliable'} )

# function to parse config file
# always takes arg[1] as the config file
# returns a dictionary of configs
def parseConfigFile( configFilePath ):
  config = {
    'failures': {}
  }
  config_file_handle = open(configFilePath, "r")
  lines = config_file_handle.readlines()
  for line in lines:
    if line[0] != '#':
      (key,sep,val) = line.partition('=')
      # if the line does not contain '=', it is invalid and hence ignored
      if len(sep) != 0:
        key = key.strip()
        val = val.strip()
        config[key] = int(val) if str.isdecimal(val) else val
        if('failures' in key):
          matchKey = re.match( r'\s*failures\[(.*),(.*)\]\s*', key)
          matchVal = re.match( r'\s*failures\[(.*),(.*)\]\s*', val)
          sequence = int( matchKey.group(1) )
          replica = int( matchKey.group(2) )
          if('failures' in config.keys()):
            if(sequence in config['failures'].keys()):
              config['failures'][sequence][replica] = val
            else:
              config['failures'][sequence] = {
                replica: val
              }
          else:
            config['failures'] = {
              sequence: {
                replica: val
              }
            }
  return config

# the main function to start the environment
def main():
  # check is argument is passed
  if( len(sys.argv) < 2 ):
    print("No config file was provided. Exiting.!")
    return
  if( not os.path.isfile(sys.argv[1]) ):
    print("Given config file '"+ sys.argv[1]+ "' not found. Exiting.! ")
    return

  # parse the config file here as we want to send parameters during setup
  config = parseConfigFile( sys.argv[1] )

  # for now we set values here
  client_count            = config['num_client']
  fault_tolerance_factor  = config['t']
  replicas_required       = 2*fault_tolerance_factor + 1
  client_timeout          = config['client_timeout']
  head_timeout            = config['head_timeout']
  nonhead_timeout         = config['nonhead_timeout']
  failures                = config['failures']

  x = 0
  replicas_required = replicas_required - x
  # create new actors on specified nodes
  olympus     = new( Olympus.Node,                        at='OlympusNode' )
  client_set  = new( Client.Node , num=client_count,      at='ClientNode'  )
  replica_set = new( Replica.Node, num=replicas_required, at='ReplicaNode' )
  if x:
    replica_set2 = new( Replica.Node, num=x, at='ReplicaNode1' )
    replica_set = replica_set.union(replica_set2)

  # create keys for client(s) and setup them
  counter = 0
  client_public_keys = {}
  client_seq_no = {}
  for client_id in set(client_set):
    private_key = nacl.signing.SigningKey.generate()
    public_key_hex = private_key.verify_key.encode(encoder=nacl.encoding.HexEncoder)
    public_key = nacl.signing.VerifyKey(public_key_hex, encoder=nacl.encoding.HexEncoder)
    workload = config['workload['+str(counter)+']']
    # print(workload)
    setup( client_id , (olympus, private_key, workload, client_timeout, fault_tolerance_factor, counter) )
    client_public_keys[client_id] = public_key
    client_seq_no[client_id] = counter
    counter += 1

  # start olympus
  setup( olympus, (fault_tolerance_factor, replica_set, head_timeout, nonhead_timeout, client_public_keys, client_seq_no, failures, config) )
  start( olympus )

  # start client(s)
  for client in set(client_set):
    start( client )
